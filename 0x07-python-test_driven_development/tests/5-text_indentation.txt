This module defines a text-indentation function ``text_indentation(text)``.

Usage
=====

Text is printed with two new lines after each of characters ``.``, ``?``,
and ``:``.

::

    >>> text_indentation = __import__('5-text_indentation').text_indentation
    >>> text_indentation("Hello?")
    Hello?
    <BLANKLINE>

No spaces are printed at the beginning of a line.

::

    >>> text_indentation("   Hi there.")
    Hi there.
    <BLANKLINE>

::

    >>> text_indentation("          ")

no spaces are printed at the end of each printed line.

::

    >>> text_indentation("Hello.   ")
    Hello.
    <BLANKLINE>

::

    >>> text_indentation("    Woah now.    This is messy.   ")
    Woah now.
    <BLANKLINE>
    This is messy.
    <BLANKLINE>

New lines are only printed for the characters ``.``, ``?``, and ``:`` -
text not ending with one of these characters is not ended with new line.

::

    >>> text_indentation("No ending, what bad gramar")
    No ending, what bad gramar

New lines within a string are printed.

::

    >>> text_indentation("Let's print new-line! Here we go:\nBinded.")
    Let's print new-line! Here we go:
    <BLANKLINE>
    <BLANKLINE>
    Binded.
    <BLANKLINE>

::

    >>> text_indentation("\n\n\n We just printed three new lines.")
    <BLANKLINE>
    <BLANKLINE>
    <BLANKLINE>
    We just printed three new lines.
    <BLANKLINE>

::
    >>> text_indentation("A sneaky \n new line.")
    A sneaky 
    new line.
    <BLANKLINE>


The paramter ``text`` must be a string. Otherwise, a TypeError is raised.

::

    >>> text_indentation(7)
    Traceback (most recent call last):
    TypeError: text must be a string

::

    >>> text_indentation({"one": 1, "two": 2})
    Traceback (most recent call last):
    TypeError: text must be a string

::

    >>> text_indentation(None)
    Traceback (most recent call last):
    TypeError: text must be a string
